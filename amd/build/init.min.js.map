{"version":3,"file":"init.min.js","sources":["../src/init.js"],"sourcesContent":["/* eslint-disable */\nimport $ from 'jquery';\nimport {exception as displayException} from 'core/notification';\nimport Templates from 'core/templates';\nimport ChartJS from 'core/chartjs';\nimport ModalFactory from 'core/modal_factory';\nimport {download_table_as_csv, renderFailIcon, renderSuccessIcon} from './util'\n\nconst COLOR_PASS = '#198754'\nconst COLOR_CHECK = '#f0ad4e'\nconst COLOR_FAIL = '#d9534f'\n\n/**\n * This function acts as the main entry point and renderer for the plugin. It will attach to DOM elements created in\n * the templates/**.mustache, and populate them with data.\n *\n * @param {object} data Information about the scan queue and scan results\n * @param {object} data.totals\n * @param {number} data.totals.scanned How many document have been scanned\n * @param {number} data.totals.inqueue How many documents are waiting to be scanned\n * @param {number} data.totals.notinqueue How many documents are not yet in the queue\n * @param {object} data.pdfs\n * @param {object[]} data.pdfs.pass An array of PDFs that meet 100% of a11y checks performed by scanner\n * @param {object[]} data.pdfs.warn An array of PDFs that meet between 100% and 0% of a11y checks performed by scanner\n * @param {object[]} data.pdfs.fail An array of PDFs that meet 0% of a11y checks performed by scanner\n **/\nexport const init = (data, courseid) => {\n\n  /**\n   * Get the last scanned file from {data}\n   * @return string\n   */\n  function getLastScanned() {\n    const allPdfs = [].concat(data.pdfs.pass, data.pdfs.warn, data.pdfs.fail)\n    const max = allPdfs.reduce((a, b) => (+a.lastchecked > +b.lastchecked) ? a : b)\n    if (max) {\n      const date = new Date(+max.lastchecked * 1000)\n      return `Last scanned ${date.toDateString()} at ${date.toLocaleTimeString()}`\n    } else {\n      return ''\n    }\n  }\n\n  /**\n   * Create stats breakdown in pie graph and attach to the DOM.\n   * Pie slices are pas, warn, and fail.\n   */\n  function renderPieChart() {\n\n    // Create the canvas element.\n    const canvas = $('<canvas/>')\n      .attr({\n        id: '#block-accessibility-filescan-pie-chart-canvas',\n        'aria-label': 'Pie chart describing the accessibility status of this course\\'s PDFs.'\n      })\n\n    const ctx = canvas[0].getContext('2d')\n\n    // Append the canvas to the DOM.\n    $('#block-accessibility-filescan-pie-chart-root')\n      .addClass(\"mb-2 w-100\")\n      .append(\n        $('<h6/>')\n          .addClass('mb-2')\n          // TODO: Text label should be a string in lang/en/block_accessibility_filescan.php\n          .text('Accessibility of Course PDFs')\n      )\n      .append(canvas)\n\n    const chartData = {\n      labels: [\n        `Satisfies all checks (${data.pdfs.pass.length})`,\n        `Satisfies some checks (${data.pdfs.warn.length})`,\n        `Satisfies no checks (${data.pdfs.fail.length})`\n      ],\n      datasets: [{\n        label: 'PDFs',\n        data: [\n          data.pdfs.pass.length,\n          data.pdfs.warn.length,\n          data.pdfs.fail.length\n        ],\n        backgroundColor: [\n          COLOR_PASS,\n          COLOR_CHECK,\n          COLOR_FAIL\n        ]\n      }]\n    }\n    new ChartJS(ctx, {\n      type: 'pie',\n      data: chartData\n    })\n  }\n\n  function createNoDataParagraph() {\n    return $('<p/>')\n      .text(\"No data to show ðŸ˜¢\")\n  }\n\n  /**\n   * Creates details table showing breakdown of stats returned by the scanner.\n   * @returns {*|jQuery|void}\n   */\n  function createDetailsTable() {\n    // Create the table content.\n    const $table = $('<table/>')\n      .attr('id', 'block-accessibility-filescan-table')\n      .addClass('table table-bordered table-hover w-100')\n      .append(\n        $('<thead/>')\n          .addClass('w-100')\n          .append(\n            $('<tr/>')\n              .addClass('w-100')\n              .append(\n                $('<th/>')\n                  .attr('scope', 'col')\n                  .text('Filename')\n              )\n              .append(\n                $('<th/>')\n                  .attr('scope', 'col')\n                  .text('Lang')\n              )\n              .append(\n                $('<th/>')\n                  .attr('scope', 'col')\n                  .text('Text')\n              )\n              .append(\n                $('<th/>')\n                  .attr('scope', 'col')\n                  .text('Title')\n              )\n              .append(\n                $('<th/>')\n                  .attr('scope', 'col')\n                  .text('Tagged')\n              )\n              .append(\n                $('<th/>')\n                  .attr('scope', 'col')\n                  .text('Pages')\n              )\n          )\n      )\n    // Create the table body.\n    const $tableBody = $('<tbody/>')\n\n    // Concatenate an array with all pdfs in data arg.\n    const pdfs = [].concat(\n      data.pdfs.pass,\n      data.pdfs.warn,\n      data.pdfs.fail\n    )\n\n    // Generate the table rows\n    const $tableRows = pdfs.map(\n      pdf => $('<tr/>')\n        .addClass('w-100')\n        .append(\n          $('<td/>')\n            .addClass('text-truncate')\n            .append(\n              $('<a/>')\n                .attr('href', pdf.url)\n                .text(pdf.filename)\n            )\n        )\n        .append(\n          $('<td/>')\n            .append(pdf.haslanguage === \"1\"\n              ? $(renderSuccessIcon())\n              : $(renderFailIcon()))\n        )\n        .append(\n          $('<td/>')\n            .append(pdf.hastext === \"1\"\n              ? $(renderSuccessIcon())\n              : $(renderFailIcon()))\n        )\n        .append(\n          $('<td/>')\n            .append(pdf.hastitle === \"1\"\n              ? $(renderSuccessIcon())\n              : $(renderFailIcon()))\n        )\n        .append(\n          $('<td/>')\n            .append(pdf.istagged === \"1\"\n              ? $(renderSuccessIcon())\n              : $(renderFailIcon()))\n        )\n        .append(\n          $('<td/>')\n            .append(pdf.pagecount >= 1\n              ? $('<span/>').text(pdf.pagecount)\n              : $(renderFailIcon()))\n        )\n    )\n\n    // Append the table rows to the table.\n    $tableBody.append($tableRows)\n    $table.append($tableBody)\n\n    return $table\n  }\n\n  /**\n   * Creates a download button that when clicked, downloads a CSV version of the table.\n   * @returns {*|jQuery|void}\n   */\n  function createDownloadButton() {\n    // Create the download to csv button.\n    return $('<button/>')\n      .addClass('btn btn-secondary mb-2')\n      .text('Download to CSV')\n      .click(() => download_table_as_csv('block-accessibility-filescan-table'))\n  }\n\n  /**\n   * Create the button element that when clicked, opens the modal.\n   * @param modal\n   * @returns {*|void}\n   */\n  function createModalTriggerButton(modal) {\n    // Create the button triggering the modal.\n    return $('<button/>')\n      .addClass('btn btn-secondary')\n      .text('Details')\n      .click(() => {\n        // Dispatch event to invalidate the block's cache\n        //dispatchEvent(\"\\\\block_a11y_check\\\\event\\\\invalidate_results_cache\" , { courseid: +courseid })\n        // Show the modal\n        modal.show()\n      })\n  }\n\n  /**\n   * Creates a modal window that displays a table of each PDF scanned by the plugin in the current course.\n   * @returns {Promise<*>}\n   */\n  async function createModal() {\n\n    const $table = createDetailsTable()\n\n    // Create the modal body first, so we can attach it during the modal's instantiation.\n    const $modalBody = $('<div/>')\n      .append(createDownloadButton($table))\n      .append(\n        $('<div/>')\n          .addClass('table-responsive')\n        )\n        .append($table)\n\n    // Create the modal.\n    const modal = await ModalFactory.create({\n      title: 'Accessibility of Course PDFs - Details',\n      body: $modalBody,\n      footer: $('<p/>')\n        .text(\n          getLastScanned()\n        ),\n      large: true\n    })\n\n    // This allows the modal to have 95% of screen width.\n    modal.getRoot()[0].childNodes[1].style.maxWidth = '95vw' || undefined\n\n    return modal\n  }\n\n  // Create the context. This gets passed to the template.\n  const context = {\n    name: 'A11y Check'\n  };\n\n  // This will call the function to load and render our template.\n  Templates.renderForPromise('block_accessibility_filescan/summary', context)\n    .then(({html, js}) => {\n\n      // Render the template.\n      Templates.appendNodeContents(\"#block-accessibility-filescan-root\", html, js);\n\n      // Create the modal.\n      createModal()\n        .then(modal => {\n\n          // Render the queue stats.\n          if (data.pdfs.pass.length > 0 || data.pdfs.warn.length > 0 || data.pdfs.fail.length > 0) {\n            // Render the pie chart.\n            renderPieChart()\n\n            // Append the button trigger to the DOM.\n            $(\"#block-accessibility-filescan-more-details-root\")\n              .addClass('mb-2')\n              .append(\n                createModalTriggerButton(modal)\n              )\n              .append(\n                $('<p/>')\n                  .addClass('mt-3')\n                  .append(\n                    $('<small/>')\n                      .text(\n                        getLastScanned()\n                      )\n                  )\n              )\n          } else {\n            $('#block-accessibility-filescan-root').append(\n              createNoDataParagraph()\n            )\n          }\n\n        }).catch((error) => displayException(error));\n\n    })\n    // Deal with this exception (Using core/notify exception function is recommended).\n    .catch((error) => displayException(error));\n};\n"],"names":["data","courseid","getLastScanned","max","concat","pdfs","pass","warn","fail","reduce","a","b","lastchecked","date","Date","toDateString","toLocaleTimeString","createModal","$table","attr","addClass","append","text","$tableBody","$tableRows","map","pdf","url","filename","haslanguage","hastext","hastitle","istagged","pagecount","createDetailsTable","$modalBody","click","modal","ModalFactory","create","title","body","footer","large","getRoot","childNodes","style","maxWidth","renderForPromise","name","then","_ref","html","js","appendNodeContents","length","canvas","id","ctx","getContext","chartData","labels","datasets","label","backgroundColor","ChartJS","type","renderPieChart","show","createModalTriggerButton","catch","error"],"mappings":"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"}